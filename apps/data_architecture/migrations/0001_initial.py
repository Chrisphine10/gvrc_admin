# Generated by Django 4.2.23 on 2025-09-04 18:36

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DataSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('source_type', models.CharField(choices=[('manual', 'Manual Entry'), ('csv', 'CSV Import'), ('api', 'API Integration'), ('mobile', 'Mobile App'), ('external', 'External System'), ('web_scraping', 'Web Scraping'), ('iot', 'IoT Device')], max_length=50)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('configuration', models.JSONField(blank=True, default=dict)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('sync_frequency', models.CharField(choices=[('realtime', 'Real-time'), ('hourly', 'Hourly'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('manual', 'Manual')], default='manual', max_length=20)),
            ],
            options={
                'verbose_name': 'Data Source',
                'verbose_name_plural': 'Data Sources',
                'db_table': 'data_sources',
            },
        ),
        migrations.CreateModel(
            name='RawDataRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_id', models.CharField(max_length=100, unique=True)),
                ('raw_data', models.JSONField()),
                ('metadata', models.JSONField(default=dict)),
                ('checksum', models.CharField(max_length=64, unique=True)),
                ('file_path', models.CharField(blank=True, max_length=500)),
                ('processing_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('archived', 'Archived')], default='pending', max_length=20)),
                ('error_message', models.TextField(blank=True)),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_architecture.datasource')),
            ],
            options={
                'verbose_name': 'Raw Data Record',
                'verbose_name_plural': 'Raw Data Records',
                'db_table': 'raw_data_records',
            },
        ),
        migrations.CreateModel(
            name='ValidatedDataRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('validated_data', models.JSONField()),
                ('quality_score', models.FloatField(default=0.0)),
                ('validation_errors', models.JSONField(blank=True, default=list)),
                ('validation_warnings', models.JSONField(blank=True, default=list)),
                ('validation_rules_applied', models.JSONField(blank=True, default=list)),
                ('is_valid', models.BooleanField(default=False)),
                ('raw_record', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data_architecture.rawdatarecord')),
            ],
            options={
                'verbose_name': 'Validated Data Record',
                'verbose_name_plural': 'Validated Data Records',
                'db_table': 'validated_data_records',
            },
        ),
        migrations.CreateModel(
            name='GeographicEnhancement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('record_id', models.CharField(max_length=100, unique=True)),
                ('original_address', models.TextField()),
                ('enhanced_address', models.TextField(blank=True)),
                ('county', models.CharField(blank=True, max_length=100)),
                ('constituency', models.CharField(blank=True, max_length=100)),
                ('ward', models.CharField(blank=True, max_length=100)),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('accuracy_level', models.CharField(blank=True, max_length=50)),
                ('geocoding_service', models.CharField(blank=True, max_length=50)),
                ('confidence_score', models.FloatField(default=0.0)),
            ],
            options={
                'verbose_name': 'Geographic Enhancement',
                'verbose_name_plural': 'Geographic Enhancements',
                'db_table': 'geographic_enhancements',
                'indexes': [models.Index(fields=['county', 'constituency'], name='geographic__county_6cd938_idx'), models.Index(fields=['confidence_score'], name='geographic__confide_054c0a_idx')],
            },
        ),
        migrations.CreateModel(
            name='EnrichedDataRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('enriched_data', models.JSONField()),
                ('enrichment_applied', models.JSONField(blank=True, default=list)),
                ('ai_enhancements', models.JSONField(blank=True, default=dict)),
                ('geographic_data', models.JSONField(blank=True, default=dict)),
                ('duplicate_flags', models.JSONField(blank=True, default=list)),
                ('final_quality_score', models.FloatField(default=0.0)),
                ('validated_record', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data_architecture.validateddatarecord')),
            ],
            options={
                'verbose_name': 'Enriched Data Record',
                'verbose_name_plural': 'Enriched Data Records',
                'db_table': 'enriched_data_records',
            },
        ),
        migrations.CreateModel(
            name='DataSwarmPrevention',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('record_id', models.CharField(max_length=100)),
                ('duplicate_group_id', models.CharField(blank=True, max_length=100)),
                ('similarity_score', models.FloatField(default=0.0)),
                ('match_strategy', models.CharField(blank=True, max_length=50)),
                ('action_taken', models.CharField(blank=True, choices=[('merged', 'Merged'), ('kept_original', 'Kept Original'), ('flagged', 'Flagged'), ('rejected', 'Rejected')], max_length=50)),
                ('prevention_details', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'verbose_name': 'Data Swarm Prevention',
                'verbose_name_plural': 'Data Swarm Prevention Records',
                'db_table': 'data_swarm_prevention',
                'indexes': [models.Index(fields=['duplicate_group_id'], name='data_swarm__duplica_5769ab_idx'), models.Index(fields=['similarity_score'], name='data_swarm__similar_fc7578_idx')],
            },
        ),
        migrations.CreateModel(
            name='DataQualityMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('record_type', models.CharField(choices=[('raw', 'Raw Data'), ('validated', 'Validated Data'), ('enriched', 'Enriched Data'), ('mart', 'Data Mart')], max_length=50)),
                ('record_id', models.CharField(max_length=100)),
                ('metric_type', models.CharField(choices=[('completeness', 'Completeness'), ('accuracy', 'Accuracy'), ('consistency', 'Consistency'), ('timeliness', 'Timeliness'), ('uniqueness', 'Uniqueness')], max_length=50)),
                ('metric_value', models.FloatField()),
                ('threshold', models.FloatField()),
                ('passed', models.BooleanField()),
                ('details', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'verbose_name': 'Data Quality Metric',
                'verbose_name_plural': 'Data Quality Metrics',
                'db_table': 'data_quality_metrics',
                'indexes': [models.Index(fields=['record_type', 'metric_type'], name='data_qualit_record__35e1c1_idx'), models.Index(fields=['passed', 'created_at'], name='data_qualit_passed_039f82_idx')],
            },
        ),
        migrations.CreateModel(
            name='DataProcessingEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event_type', models.CharField(choices=[('data_ingested', 'Data Ingested'), ('data_validated', 'Data Validated'), ('data_enriched', 'Data Enriched'), ('data_served', 'Data Served'), ('quality_alert', 'Quality Alert'), ('duplicate_detected', 'Duplicate Detected'), ('error_occurred', 'Error Occurred')], max_length=50)),
                ('record_id', models.CharField(max_length=100)),
                ('event_data', models.JSONField(blank=True, default=dict)),
                ('processing_time', models.FloatField(blank=True, null=True)),
                ('success', models.BooleanField(default=True)),
                ('error_message', models.TextField(blank=True)),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_architecture.datasource')),
            ],
            options={
                'verbose_name': 'Data Processing Event',
                'verbose_name_plural': 'Data Processing Events',
                'db_table': 'data_processing_events',
            },
        ),
        migrations.CreateModel(
            name='DataMart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('mart_data', models.JSONField()),
                ('mart_type', models.CharField(choices=[('facilities', 'Facilities'), ('geographic', 'Geographic'), ('analytics', 'Analytics'), ('mobile', 'Mobile'), ('reporting', 'Reporting')], max_length=50)),
                ('is_served', models.BooleanField(default=False)),
                ('serving_metadata', models.JSONField(blank=True, default=dict)),
                ('enriched_record', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='data_architecture.enricheddatarecord')),
            ],
            options={
                'verbose_name': 'Data Mart',
                'verbose_name_plural': 'Data Marts',
                'db_table': 'data_marts',
            },
        ),
        migrations.AddIndex(
            model_name='validateddatarecord',
            index=models.Index(fields=['is_valid', 'quality_score'], name='validated_d_is_vali_40122d_idx'),
        ),
        migrations.AddIndex(
            model_name='validateddatarecord',
            index=models.Index(fields=['created_at'], name='validated_d_created_959680_idx'),
        ),
        migrations.AddIndex(
            model_name='rawdatarecord',
            index=models.Index(fields=['source', 'processing_status'], name='raw_data_re_source__e3ac22_idx'),
        ),
        migrations.AddIndex(
            model_name='rawdatarecord',
            index=models.Index(fields=['created_at'], name='raw_data_re_created_522a4e_idx'),
        ),
        migrations.AddIndex(
            model_name='rawdatarecord',
            index=models.Index(fields=['checksum'], name='raw_data_re_checksu_3c6338_idx'),
        ),
        migrations.AddIndex(
            model_name='enricheddatarecord',
            index=models.Index(fields=['final_quality_score'], name='enriched_da_final_q_3ea5d8_idx'),
        ),
        migrations.AddIndex(
            model_name='enricheddatarecord',
            index=models.Index(fields=['created_at'], name='enriched_da_created_37e8cd_idx'),
        ),
        migrations.AddIndex(
            model_name='dataprocessingevent',
            index=models.Index(fields=['event_type', 'created_at'], name='data_proces_event_t_7feee9_idx'),
        ),
        migrations.AddIndex(
            model_name='dataprocessingevent',
            index=models.Index(fields=['source', 'success'], name='data_proces_source__8e425c_idx'),
        ),
        migrations.AddIndex(
            model_name='datamart',
            index=models.Index(fields=['mart_type', 'is_served'], name='data_marts_mart_ty_305649_idx'),
        ),
        migrations.AddIndex(
            model_name='datamart',
            index=models.Index(fields=['created_at'], name='data_marts_created_e863d3_idx'),
        ),
    ]
